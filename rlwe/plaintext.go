package rlwe

import (
	"io"

	"github.com/tuneinsight/lattigo/v4/ring"
	"github.com/tuneinsight/lattigo/v4/utils/sampling"
)

// Plaintext is a common base type for RLWE plaintexts.
type Plaintext struct {
	OperandQ
	Value *ring.Poly
}

// NewPlaintext creates a new Plaintext at level `level` from the parameters.
func NewPlaintext(params Parameters, level int) (pt *Plaintext) {
	op := *NewOperandQ(params, 0, level)
	op.Scale = params.DefaultScale()
	return &Plaintext{OperandQ: op, Value: op.Value[0]}
}

// NewPlaintextAtLevelFromPoly constructs a new Plaintext at a specific level
// where the message is set to the passed poly. No checks are performed on poly and
// the returned Plaintext will share its backing array of coefficients.
// Returned plaintext's MetaData is empty.
func NewPlaintextAtLevelFromPoly(level int, poly *ring.Poly) (pt *Plaintext) {
	op := *NewOperandQAtLevelFromPoly(level, []*ring.Poly{poly})
	return &Plaintext{OperandQ: op, Value: op.Value[0]}
}

// Copy copies the `other` plaintext value into the receiver plaintext.
func (pt *Plaintext) Copy(other *Plaintext) {
	other.OperandQ.Copy(&other.OperandQ)
	other.Value = other.OperandQ.Value[0]
}

// Equal performs a deep equal.
func (pt *Plaintext) Equal(other *Plaintext) bool {
	return pt.OperandQ.Equal(&other.OperandQ) && pt.Value.Equal(other.Value)
}

// NewPlaintextRandom generates a new uniformly distributed Plaintext.
func NewPlaintextRandom(prng sampling.PRNG, params Parameters, level int) (pt *Plaintext) {
	pt = NewPlaintext(params, level)
	PopulateElementRandom(prng, params, pt.El())
	return
}

// UnmarshalBinary decodes a slice of bytes generated by MarshalBinary
// or Read on the objeop.
func (pt *Plaintext) UnmarshalBinary(p []byte) (err error) {
	if err = pt.OperandQ.UnmarshalBinary(p); err != nil {
		return
	}
	pt.Value = pt.OperandQ.Value[0]
	return
}

// Write decodes a slice of bytes generated by MarshalBinary or
// Read on the object and returns the number of bytes read.
func (pt *Plaintext) Write(p []byte) (n int, err error) {
	if n, err = pt.OperandQ.Write(p); err != nil {
		return
	}
	pt.Value = pt.OperandQ.Value[0]
	return
}

// ReadFrom reads on the object from an io.Writer.
// To ensure optimal efficiency and minimal allocations, the user is encouraged
// to provide a struct implementing the interface buffer.Reader, which defines
// a subset of the method of the bufio.Reader.
// If r is not compliant to the buffer.Reader interface, it will be wrapped in
// a new bufio.Reader.
// For additional information, see lattigo/utils/buffer/reader.go.
func (pt *Plaintext) ReadFrom(r io.Reader) (n int64, err error) {
	if n, err = pt.OperandQ.ReadFrom(r); err != nil {
		return
	}

	pt.Value = pt.OperandQ.Value[0]
	return
}
