package rlwe

import (
	"fmt"
	"io"

	"github.com/google/go-cmp/cmp"
	"github.com/tuneinsight/lattigo/v4/rlwe/ringqp"
)

// CiphertextQP is a generic type for RLWE ciphertexts in R_qp.
// It contains no MetaData.
type CiphertextQP struct {
	MetaData
	Value [2]ringqp.Poly
}

// NewCiphertextQP allocates a new CiphertextQP.
func NewCiphertextQP(params Parameters, levelQ, levelP int) CiphertextQP {
	ringQ := params.RingQ().AtLevel(levelQ)
	ringP := params.RingQ().AtLevel(levelP)

	return CiphertextQP{
		Value: [2]ringqp.Poly{
			{
				Q: ringQ.NewPoly(),
				P: ringP.NewPoly(),
			},
			{
				Q: ringQ.NewPoly(),
				P: ringP.NewPoly(),
			},
		},
		MetaData: MetaData{
			IsNTT: params.DefaultNTTFlag(),
		},
	}
}

func (ct *CiphertextQP) Equal(other *CiphertextQP) bool {
	return cmp.Equal(ct.MetaData, other.MetaData) && cmp.Equal(ct.Value, other.Value)
}

// LevelQ returns the level of the modulus Q of the first element of the object.
func (ct *CiphertextQP) LevelQ() int {
	return ct.Value[0].LevelQ()
}

// LevelP returns the level of the modulus P of the first element of the object.
func (ct *CiphertextQP) LevelP() int {
	return ct.Value[0].LevelP()
}

// CopyNew creates a deep copy of the object and returns it.
func (ct *CiphertextQP) CopyNew() *CiphertextQP {
	return &CiphertextQP{Value: [2]ringqp.Poly{ct.Value[0].CopyNew(), ct.Value[1].CopyNew()}, MetaData: ct.MetaData}
}

// BinarySize returns the size in bytes that the object once marshalled into a binary form.
func (ct *CiphertextQP) BinarySize() int {
	return ct.MetaData.BinarySize() + ct.Value[0].BinarySize() + ct.Value[1].BinarySize()
}

// MarshalBinary encodes the object into a binary form on a newly allocated slice of bytes.
func (ct *CiphertextQP) MarshalBinary() (data []byte, err error) {
	data = make([]byte, ct.BinarySize())
	_, err = ct.Read(data)
	return
}

// WriteTo writes the object on an io.Writer.
// To ensure optimal efficiency and minimal allocations, the user is encouraged
// to provide a struct implementing the interface buffer.Writer, which defines
// a subset of the method of the bufio.Writer.
// If w is not compliant to the buffer.Writer interface, it will be wrapped in
// a new bufio.Writer.
// For additional information, see lattigo/utils/buffer/writer.go.
func (ct *CiphertextQP) WriteTo(w io.Writer) (n int64, err error) {

	if n, err = ct.MetaData.WriteTo(w); err != nil {
		return n, err
	}

	var inc int64
	if inc, err = ct.Value[0].WriteTo(w); err != nil {
		return n + inc, err
	}

	n += inc

	if inc, err = ct.Value[1].WriteTo(w); err != nil {
		return n + inc, err
	}

	n += inc

	return
}

// ReadFrom reads on the object from an io.Writer.
// To ensure optimal efficiency and minimal allocations, the user is encouraged
// to provide a struct implementing the interface buffer.Reader, which defines
// a subset of the method of the bufio.Reader.
// If r is not compliant to the buffer.Reader interface, it will be wrapped in
// a new bufio.Reader.
// For additional information, see lattigo/utils/buffer/reader.go.
func (ct *CiphertextQP) ReadFrom(r io.Reader) (n int64, err error) {

	if ct == nil {
		return 0, fmt.Errorf("cannot ReadFrom: target object is nil")
	}

	if n, err = ct.MetaData.ReadFrom(r); err != nil {
		return n, err
	}

	var inc int64
	if inc, err = ct.Value[0].ReadFrom(r); err != nil {
		return n + inc, err
	}

	n += inc

	if inc, err = ct.Value[1].ReadFrom(r); err != nil {
		return n + inc, err
	}

	n += inc

	return
}

// Read encodes the object into a binary form on a preallocated slice of bytes
// and returns the number of bytes written.
func (ct *CiphertextQP) Read(data []byte) (ptr int, err error) {

	if len(data) < ct.BinarySize() {
		return 0, fmt.Errorf("cannote write: len(data) is too small")
	}

	if ptr, err = ct.MetaData.Read(data); err != nil {
		return
	}

	var inc int

	if inc, err = ct.Value[0].Read(data[ptr:]); err != nil {
		return
	}

	ptr += inc

	if inc, err = ct.Value[1].Read(data[ptr:]); err != nil {
		return
	}

	ptr += inc

	return
}

// UnmarshalBinary decodes a slice of bytes generated by MarshalBinary
// or Read on the object.
func (ct *CiphertextQP) UnmarshalBinary(data []byte) (err error) {
	_, err = ct.Write(data)
	return
}

// Write decodes a slice of bytes generated by MarshalBinary or
// Read on the object and returns the number of bytes read.
func (ct *CiphertextQP) Write(data []byte) (ptr int, err error) {

	if ptr, err = ct.MetaData.Write(data); err != nil {
		return
	}

	var inc int

	if inc, err = ct.Value[0].Write(data[ptr:]); err != nil {
		return
	}

	ptr += inc

	if inc, err = ct.Value[1].Write(data[ptr:]); err != nil {
		return
	}

	ptr += inc

	return
}
