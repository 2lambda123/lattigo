package structs

import (
	"bufio"
	"encoding/binary"
	"fmt"
	"io"

	"github.com/tuneinsight/lattigo/v4/utils/buffer"
)

// Matrix is a struct storing a vector of Vector.
type Matrix[T any] []Vector[T]

// Set sets a matrix to the double slice of *T.
// Overwrites the current states of the matrix.
func (m *Matrix[T]) Set(mat [][]*T) {

	mi := Matrix[T](make([]Vector[T], len(mat)))
	for i := range mi {
		mi[i] = Vector[T]{}
		mi[i].Set(mat[i])
	}

	*m = mi
}

// Get returns the underlying double slice of *T.
func (m Matrix[T]) Get() (mat [][]*T) {
	mat = make([][]*T, len(m))
	for i := range mat {
		mat[i] = m[i].Get()
	}
	return
}

// BinarySize returns the size in bytes of the object
// when encoded using MarshalBinary, Read or WriteTo.
func (m Matrix[T]) BinarySize() (size int) {
	size += 8
	for _, mi := range m {
		size += mi.BinarySize()
	}
	return
}

// MarshalBinary encodes the object into a binary form on a newly allocated slice of bytes.
func (m *Matrix[T]) MarshalBinary() (p []byte, err error) {
	p = make([]byte, m.BinarySize())
	_, err = m.Read(p)
	return
}

// Read encodes the object into a binary form on a preallocated slice of bytes
// and returns the number of bytes written.
func (m *Matrix[T]) Read(b []byte) (n int, err error) {

	mi := *m

	binary.LittleEndian.PutUint64(b[n:], uint64(len(mi)))
	n += 8

	var inc int
	for i := range mi {
		if inc, err = codec.ReadWrapper(b[n:], &mi[i]); err != nil {
			return n + inc, err
		}

		n += inc
	}

	return
}

// WriteTo writes the object on an io.Writer.
// To ensure optimal efficiency and minimal allocations, the user is encouraged
// to provide a struct implementing the interface buffer.Writer, which defines
// a subset of the method of the bufio.Writer.
// If w is not compliant to the buffer.Writer interface, it will be wrapped in
// a new bufio.Writer.
// For additional information, see lattigo/utils/buffer/writer.go.
func (m *Matrix[T]) WriteTo(w io.Writer) (int64, error) {
	switch w := w.(type) {
	case buffer.Writer:

		var err error
		var n int64

		mi := *m

		var inc int
		if inc, err = buffer.WriteInt(w, len(mi)); err != nil {
			return int64(inc), err
		}

		n += int64(inc)

		for i := range mi {
			var inc int64
			if inc, err = codec.WriteToWrapper(w, &mi[i]); err != nil {
				return n + inc, err
			}

			n += inc
		}

		return n, nil

	default:
		return m.WriteTo(bufio.NewWriter(w))
	}
}

// UnmarshalBinary decodes a slice of bytes generated by MarshalBinary
// or Read on the object.
func (m *Matrix[T]) UnmarshalBinary(p []byte) (err error) {
	_, err = m.Write(p)
	return
}

// Write decodes a slice of bytes generated by MarshalBinary, WriteTo or
// Read on the object and returns the number of bytes read.
func (m *Matrix[T]) Write(p []byte) (n int, err error) {
	size := int(binary.LittleEndian.Uint64(p[n:]))
	n += 8

	if len(*m) != size {
		*m = make([]Vector[T], size)
	}

	mi := *m

	var inc int
	for i := range mi {
		if inc, err = codec.WriteWrapper(p[n:], &mi[i]); err != nil {
			return n + inc, err
		}

		n += inc
	}

	return
}

// ReadFrom reads on the object from an io.Writer.
// To ensure optimal efficiency and minimal allocations, the user is encouraged
// to provide a struct implementing the interface buffer.Reader, which defines
// a subset of the method of the bufio.Reader.
// If r is not compliant to the buffer.Reader interface, it will be wrapped in
// a new bufio.Reader.
// For additional information, see lattigo/utils/buffer/reader.go.
func (m *Matrix[T]) ReadFrom(r io.Reader) (int64, error) {
	switch r := r.(type) {
	case buffer.Reader:

		var err error
		var size, n int

		if n, err = buffer.ReadInt(r, &size); err != nil {
			return int64(n), fmt.Errorf("cannot ReadFrom: size: %w", err)
		}

		if len(*m) != size {
			*m = make([]Vector[T], size)
		}

		mi := *m

		for i := range mi {

			var inc int64
			if inc, err = codec.ReadFromWrapper(r, &mi[i]); err != nil {
				return int64(n) + inc, err
			}

			n += int(inc)
		}

		return int64(n), nil

	default:
		return m.ReadFrom(bufio.NewReader(r))
	}
}
