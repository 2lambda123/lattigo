package ring

import (
	"encoding/binary"
	"fmt"

	"github.com/tuneinsight/lattigo/v4/utils/buffer"
)

// Poly is the structure that contains the coefficients of a polynomial.
type Poly struct {
	Coeffs [][]uint64 // Dimension-2 slice of coefficients (re-slice of Buff)
	Buff   []uint64   // Dimension-1 slice of coefficient
}

// NewPoly creates a new polynomial with N coefficients set to zero and Level+1 moduli.
func NewPoly(N, Level int) (pol *Poly) {
	pol = new(Poly)

	pol.Buff = make([]uint64, N*(Level+1))
	pol.Coeffs = make([][]uint64, Level+1)
	for i := 0; i < Level+1; i++ {
		pol.Coeffs[i] = pol.Buff[i*N : (i+1)*N]
	}

	return
}

// Resize resizes the level of the target polynomial to the provided level.
// If the provided level is larger than the current level, then allocates zero
// coefficients, otherwise dereferences the coefficients above the provided level.
func (pol *Poly) Resize(level int) {
	N := pol.N()
	if pol.Level() > level {
		pol.Buff = pol.Buff[:N*(level+1)]
		pol.Coeffs = pol.Coeffs[:level+1]
	} else if level > pol.Level() {
		pol.Buff = append(pol.Buff, make([]uint64, N*(level-pol.Level()))...)
		pol.Coeffs = append(pol.Coeffs, make([][]uint64, level-pol.Level())...)
		for i := 0; i < level+1; i++ {
			pol.Coeffs[i] = pol.Buff[i*N : (i+1)*N]
		}
	}
}

// N returns the number of coefficients of the polynomial, which equals the degree of the Ring cyclotomic polynomial.
func (pol *Poly) N() int {
	return len(pol.Coeffs[0])
}

// Level returns the current number of moduli minus 1.
func (pol *Poly) Level() int {
	return len(pol.Coeffs) - 1
}

// Zero sets all coefficients of the target polynomial to 0.
func (pol *Poly) Zero() {
	ZeroVec(pol.Buff)
}

// CopyNew creates an exact copy of the target polynomial.
func (pol *Poly) CopyNew() (p1 *Poly) {
	p1 = NewPoly(pol.N(), pol.Level())
	copy(p1.Buff, pol.Buff)
	return
}

// Copy copies the coefficients of p0 on p1 within the given Ring. It requires p1 to be at least as big p0.
// Expects the degree of both polynomials to be identical.
func Copy(p0, p1 *Poly) {
	copy(p1.Buff, p0.Buff)
}

// CopyLvl copies the coefficients of p0 on p1 within the given Ring.
// Copies for up to level+1 moduli.
// Expects the degree of both polynomials to be identical.
func CopyLvl(level int, p0, p1 *Poly) {
	copy(p1.Buff[:p1.N()*(level+1)], p0.Buff)
}

// CopyValues copies the coefficients of p1 on the target polynomial.
// Onyl copies minLevel(pol, p1) levels.
// Expects the degree of both polynomials to be identical.
func (pol *Poly) CopyValues(p1 *Poly) {
	if pol != p1 {
		copy(pol.Buff, p1.Buff)
	}
}

// Copy copies the coefficients of p1 on the target polynomial.
// Onyl copies minLevel(pol, p1) levels.
func (pol *Poly) Copy(p1 *Poly) {
	pol.CopyValues(p1)
}

// Equals returns true if the receiver Poly is equal to the provided other Poly.
// This function checks for strict equality between the polynomial coefficients
// (i.e., it does not consider congruence as equality within the ring like
// `Ring.Equals` does).
func (pol *Poly) Equals(other *Poly) bool {
	if pol == other {
		return true
	}

	if pol != nil && other != nil && len(pol.Buff) == len(other.Buff) {
		for i := range pol.Buff {
			if other.Buff[i] != pol.Buff[i] {
				return false
			}
		}
		return true
	}
	return false
}

// MarshalBinarySize returns the size in bytes that the object once marshalled into a binary form.
func MarshalBinarySize(N, Level int) (size int) {
	return 5 + N*(Level+1)<<3
}

// MarshalBinarySize returns the size in bytes that the object once marshalled into a binary form.
// Assumes that each coefficient takes 8 bytes.
func (pol *Poly) MarshalBinarySize() (size int) {
	return MarshalBinarySize(pol.N(), pol.Level())
}

// MarshalBinary encodes the object into a binary form on a newly allocated slice of bytes.
func (pol *Poly) MarshalBinary() (p []byte, err error) {
	p = make([]byte, pol.MarshalBinarySize())
	_, err = pol.Read(p)
	return
}

// UnmarshalBinary decodes a slice of bytes generated by MarshalBinary
// or Read on the object.
func (pol *Poly) UnmarshalBinary(p []byte) (err error) {

	N := int(binary.LittleEndian.Uint32(p))
	Level := int(p[4])

	if size := MarshalBinarySize(N, Level); len(p) != size {
		return fmt.Errorf("cannot UnmarshalBinary: len(p)=%d != %d", len(p), size)
	}

	if _, err = pol.Write(p); err != nil {
		return
	}

	return nil
}

func (pol *Poly) WriteTo(w *buffer.Writer) (n int, err error) {

	var inc int
	if inc, err = w.WriteUint32(uint32(pol.N())); err != nil {
		return n + inc, fmt.Errorf("cannot WriteTo: N: %w", err)
	}

	n += inc

	if inc, err = w.WriteUint8(uint8(pol.Level())); err != nil {
		return n + inc, fmt.Errorf("cannot WriteTo: levels: %w", err)
	}

	n += inc

	if inc, err = w.WriteUint64Slice(pol.Buff); err != nil {
		return n + inc, fmt.Errorf("cannot WriteTo: buffer: %w", err)
	}

	n += inc

	return n, nil
}

func (pol *Poly) ReadFrom(r *buffer.Reader) (n int, err error) {
	var inc int

	var NU32 uint32
	if inc, err = r.ReadUint32(&NU32); err != nil {
		return n + inc, fmt.Errorf("cannot ReadFrom: N: %w", err)
	}

	N := int(NU32)

	if N == 0 {
		return n, fmt.Errorf("error ReadFrom: N cannot be 0")
	}

	n += inc

	var LevelU8 uint8
	if inc, err = r.ReadUint8(&LevelU8); err != nil {
		return n + inc, fmt.Errorf("cannot ReadFrom: Level: %w", err)
	}

	Level := int(LevelU8)

	if Level < 0 || Level > 255 {
		return n + inc, fmt.Errorf("invalid encoding: 0<=Level=%d<256", Level)
	}

	n += inc

	if pol.Buff == nil || len(pol.Buff) != N*(Level+1) {
		pol.Buff = make([]uint64, N*int(Level+1))
	}

	if inc, err = r.ReadUint64Slice(pol.Buff); err != nil {
		return n + inc, fmt.Errorf("cannot ReadFrom: pol.Buff: %w", err)
	}

	n += inc

	// Reslice
	pol.Coeffs = make([][]uint64, Level+1)
	for i := 0; i < Level+1; i++ {
		pol.Coeffs[i] = pol.Buff[i*N : (i+1)*N]
	}

	return
}

// Read encodes the object into a binary form on a preallocated slice of bytes
// and returns the number of bytes written.
func (pol *Poly) Read(p []byte) (n int, err error) {

	N := pol.N()
	Level := pol.Level()

	if len(p) < pol.MarshalBinarySize() {
		return n, fmt.Errorf("cannot Read: len(p)=%d < %d", len(p), pol.MarshalBinarySize())
	}

	binary.LittleEndian.PutUint32(p[n:], uint32(N))
	n += 4

	p[n] = uint8(Level)
	n++

	coeffs := pol.Buff
	NCoeffs := len(coeffs)

	for i, j := 0, n; i < NCoeffs; i, j = i+1, j+8 {
		binary.LittleEndian.PutUint64(p[j:], coeffs[i])
	}

	n += N * (Level + 1) << 3

	return
}

// Write decodes a slice of bytes generated by MarshalBinary or
// Read on the object and returns the number of bytes read.
func (pol *Poly) Write(p []byte) (n int, err error) {

	N := int(binary.LittleEndian.Uint32(p))
	Level := int(p[4])

	n = 5

	if size := MarshalBinarySize(N, Level); len(p) < size {
		return n, fmt.Errorf("cannot Read: len(p)=%d < ", size)
	}

	if pol.Buff == nil || len(pol.Buff) != N*(Level+1) {
		pol.Buff = make([]uint64, N*(Level+1))
	}

	coeffs := pol.Buff
	NBuff := len(coeffs)

	for i, j := 0, n; i < NBuff; i, j = i+1, j+8 {
		coeffs[i] = binary.LittleEndian.Uint64(p[j:])
	}

	n += N * (Level + 1) << 3

	// Reslice
	pol.Coeffs = make([][]uint64, Level+1)
	for i := 0; i < Level+1; i++ {
		pol.Coeffs[i] = pol.Buff[i*N : (i+1)*N]
	}

	return
}
