package rlwe

import "github.com/tuneinsight/lattigo/v4/rlwe/ringqp"

// SecretKey is a type for generic RLWE secret keys.
// The Value field stores the polynomial in NTT and Montgomery form.
type SecretKey struct {
	Value ringqp.Poly
}

// NewSecretKey generates a new SecretKey with zero values.
func NewSecretKey(params Parameters) *SecretKey {
	return &SecretKey{Value: params.RingQP().NewPoly()}
}

// LevelQ returns the level of the modulus Q of the target.
func (sk *SecretKey) LevelQ() int {
	return sk.Value.Q.Level()
}

// LevelP returns the level of the modulus P of the target.
// Returns -1 if P is absent.
func (sk *SecretKey) LevelP() int {
	if sk.Value.P != nil {
		return sk.Value.P.Level()
	}

	return -1
}

// CopyNew creates a deep copy of the receiver secret key and returns it.
func (sk *SecretKey) CopyNew() *SecretKey {
	if sk == nil {
		return nil
	}
	return &SecretKey{sk.Value.CopyNew()}
}

// MarshalBinarySize returns the size in bytes that the object once marshalled into a binary form.
func (sk *SecretKey) MarshalBinarySize() (dataLen int) {
	return sk.Value.MarshalBinarySize()
}

// MarshalBinary encodes the object into a binary form on a newly allocated slice of bytes.
func (sk *SecretKey) MarshalBinary() (data []byte, err error) {
	data = make([]byte, sk.MarshalBinarySize())
	if _, err = sk.Read(data); err != nil {
		return nil, err
	}
	return
}

// Read encodes the object into a binary form on a preallocated slice of bytes
// and returns the number of bytes written.
func (sk *SecretKey) Read(data []byte) (ptr int, err error) {
	return sk.Value.Read(data)
}

// UnmarshalBinary decodes a slice of bytes generated by MarshalBinary
// or Read on the object.
func (sk *SecretKey) UnmarshalBinary(data []byte) (err error) {
	_, err = sk.Write(data)
	return
}

// Write decodes a slice of bytes generated by MarshalBinary or
// Read on the object and returns the number of bytes read.
func (sk *SecretKey) Write(data []byte) (ptr int, err error) {
	return sk.Value.Write(data)
}
