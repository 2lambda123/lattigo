package rlwe

import (
	"io"

	"github.com/tuneinsight/lattigo/v4/rlwe/ringqp"
)

// PublicKey is a type for generic RLWE public keys.
// The Value field stores the polynomials in NTT and Montgomery form.
type PublicKey struct {
	CiphertextQP
}

// NewPublicKey returns a new PublicKey with zero values.
func NewPublicKey(params Parameters) (pk *PublicKey) {
	return &PublicKey{CiphertextQP{Value: [2]ringqp.Poly{params.RingQP().NewPoly(), params.RingQP().NewPoly()}, MetaData: MetaData{IsNTT: true, IsMontgomery: true}}}
}

// LevelQ returns the level of the modulus Q of the target.
func (pk *PublicKey) LevelQ() int {
	return pk.Value[0].Q.Level()
}

// LevelP returns the level of the modulus P of the target.
// Returns -1 if P is absent.
func (pk *PublicKey) LevelP() int {
	if pk.Value[0].P != nil {
		return pk.Value[0].P.Level()
	}

	return -1
}

// Equals checks two PublicKey struct for equality.
func (pk *PublicKey) Equals(other *PublicKey) bool {
	if pk == other {
		return true
	}
	return pk.Value[0].Equals(other.Value[0]) && pk.Value[1].Equals(other.Value[1])
}

// CopyNew creates a deep copy of the receiver PublicKey and returns it.
func (pk *PublicKey) CopyNew() *PublicKey {
	if pk == nil {
		return nil
	}
	return &PublicKey{*pk.CiphertextQP.CopyNew()}
}

// BinarySize returns the size in bytes that the object once marshalled into a binary form.
func (pk *PublicKey) BinarySize() (dataLen int) {
	return pk.CiphertextQP.BinarySize()
}

// MarshalBinary encodes the object into a binary form on a newly allocated slice of bytes.
func (pk *PublicKey) MarshalBinary() (data []byte, err error) {
	data = make([]byte, pk.BinarySize())
	if _, err = pk.Read(data); err != nil {
		return nil, err
	}
	return
}

// WriteTo writes the object on an io.Writer.
// To ensure optimal efficiency and minimal allocations, the user is encouraged
// to provide a struct implementing the interface buffer.Writer, which defines
// a subset of the method of the bufio.Writer.
// If w is not compliant to the buffer.Writer interface, it will be wrapped in
// a new bufio.Writer.
// For additional information, see lattigo/utils/buffer/writer.go.
func (pk *PublicKey) WriteTo(w io.Writer) (n int64, err error) {
	return pk.CiphertextQP.WriteTo(w)
}

// Read encodes the object into a binary form on a preallocated slice of bytes
// and returns the number of bytes written.
func (pk *PublicKey) Read(data []byte) (ptr int, err error) {
	return pk.CiphertextQP.Read(data)
}

// ReadFrom reads on the object from an io.Writer.
// To ensure optimal efficiency and minimal allocations, the user is encouraged
// to provide a struct implementing the interface buffer.Reader, which defines
// a subset of the method of the bufio.Reader.
// If r is not compliant to the buffer.Reader interface, it will be wrapped in
// a new bufio.Reader.
// For additional information, see lattigo/utils/buffer/reader.go.
func (pk *PublicKey) ReadFrom(r io.Reader) (n int64, err error) {
	return pk.CiphertextQP.ReadFrom(r)
}

// UnmarshalBinary decodes a slice of bytes generated by MarshalBinary
// or Read on the object.
func (pk *PublicKey) UnmarshalBinary(data []byte) (err error) {
	_, err = pk.Write(data)
	return
}

// Write decodes a slice of bytes generated by MarshalBinary or
// Read on the object and returns the number of bytes read.
func (pk *PublicKey) Write(data []byte) (ptr int, err error) {
	return pk.CiphertextQP.Write(data)
}
