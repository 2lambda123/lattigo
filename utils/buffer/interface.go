package buffer

// BinaryMarshaler is an interface implemented by an object that can marshal itself into a binary form.
type BinaryMarshaler interface {

	// MarshalBinarySize returns the size in bytes that the object once encoded into a binary form
	// with MarshalBinary, WriteTo or Read.
	MarshalBinarySize() int

	// MarshalBinary encodes the object into a binary form on a newly allocated slice of bytes.
	// MarshalBinary must produce the same slice of bytes as WriteTo and Read.
	MarshalBinary() (p []byte, err error)

	// WriteTo encodes the object into a binary form and writes it on the provided Writer.
	// WriteTo must produce the same slice of bytes as MarshalBinary and Read.
	WriteTo(w Writer) (err error)

	// Read encodes the object into a binary form on a preallocated slice of bytes
	// and returns the number of bytes written.
	// Read must produce the same slice of bytes as MarshalBinary and WriteTo.
	Read(p []byte) (n int, err error)
}

// BinaryUnmarshaler is an interface implemented by an object that can unmarshal a binary representation of itself.
type BinaryUnmarshaler interface {

	// UnmarshalBinary decodes a slice of bytes generated by MarshalBinary,
	// WriteTo or Read on the object.
	UnmarshalBinary(p []byte) (err error)

	// Write decodes a slice of bytes generated by MarshalBinary or
	// Read on the object and returns the number of bytes read.
	Write(p []byte) (n int, err error)

	// ReadFrom reads from the Reader the next valide slice of bytes generated by MarshalBinary, WriteTo or Read on the object.
	ReadFrom(r Reader) (err error)
}
