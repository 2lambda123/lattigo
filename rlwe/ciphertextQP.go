package rlwe

import (
	"fmt"

	"github.com/tuneinsight/lattigo/v4/rlwe/ringqp"
)

// CiphertextQP is a generic type for RLWE ciphertexts in R_qp.
// It contains no MetaData.
type CiphertextQP struct {
	MetaData
	Value [2]ringqp.Poly
}

// NewCiphertextQP allocates a new CiphertextQP.
func NewCiphertextQP(params Parameters, levelQ, levelP int) CiphertextQP {
	ringQ := params.RingQ().AtLevel(levelQ)
	ringP := params.RingQ().AtLevel(levelP)

	return CiphertextQP{
		Value: [2]ringqp.Poly{
			{
				Q: ringQ.NewPoly(),
				P: ringP.NewPoly(),
			},
			{
				Q: ringQ.NewPoly(),
				P: ringP.NewPoly(),
			},
		},
		MetaData: MetaData{
			IsNTT: params.DefaultNTTFlag(),
		},
	}
}

// LevelQ returns the level of the modulus Q of the first element of the object.
func (ct *CiphertextQP) LevelQ() int {
	return ct.Value[0].LevelQ()
}

// LevelP returns the level of the modulus P of the first element of the object.
func (ct *CiphertextQP) LevelP() int {
	return ct.Value[0].LevelP()
}

// CopyNew creates a deep copy of the object and returns it.
func (ct *CiphertextQP) CopyNew() *CiphertextQP {
	return &CiphertextQP{Value: [2]ringqp.Poly{ct.Value[0].CopyNew(), ct.Value[1].CopyNew()}, MetaData: ct.MetaData}
}

// MarshalBinarySize returns the size in bytes that the object once marshalled into a binary form.
func (ct *CiphertextQP) MarshalBinarySize() int {
	return ct.MetaData.MarshalBinarySize() + ct.Value[0].MarshalBinarySize64() + ct.Value[1].MarshalBinarySize64()
}

// MarshalBinary encodes the object into a binary form on a newly allocated slice of bytes.
func (ct *CiphertextQP) MarshalBinary() (data []byte, err error) {
	data = make([]byte, ct.MarshalBinarySize())
	_, err = ct.MarshalBinaryInPlace(data)
	return
}

// MarshalBinaryInPlace encodes the object into a binary form on a preallocated slice of bytes
// and returns the number of bytes written.
func (ct *CiphertextQP) MarshalBinaryInPlace(data []byte) (ptr int, err error) {

	if len(data) < ct.MarshalBinarySize() {
		return 0, fmt.Errorf("cannote write: len(data) is too small")
	}

	if ptr, err = ct.MetaData.MarshalBinaryInPlace(data); err != nil {
		return
	}

	var inc int

	if inc, err = ct.Value[0].Encode64(data[ptr:]); err != nil {
		return
	}

	ptr += inc

	if inc, err = ct.Value[1].Encode64(data[ptr:]); err != nil {
		return
	}

	ptr += inc

	return
}

// UnmarshalBinary decodes a slice of bytes generated by MarshalBinary
// or MarshalBinaryInPlace on the object.
func (ct *CiphertextQP) UnmarshalBinary(data []byte) (err error) {
	_, err = ct.UnmarshalBinaryInPlace(data)
	return
}

// UnmarshalBinaryInPlace decodes a slice of bytes generated by MarshalBinary or
// MarshalBinaryInPlace on the object and returns the number of bytes read.
func (ct *CiphertextQP) UnmarshalBinaryInPlace(data []byte) (ptr int, err error) {

	if ptr, err = ct.MetaData.UnmarshalBinaryInPlace(data); err != nil {
		return
	}

	var inc int

	if inc, err = ct.Value[0].Decode64(data[ptr:]); err != nil {
		return
	}

	ptr += inc

	if inc, err = ct.Value[1].Decode64(data[ptr:]); err != nil {
		return
	}

	ptr += inc

	return
}
