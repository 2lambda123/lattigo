package drlwe

import (
	"bufio"
	"io"

	"github.com/tuneinsight/lattigo/v4/utils/buffer"
)

// RefreshShare is a struct storing the decryption and recryption shares.
type RefreshShare struct {
	E2SShare CKSShare
	S2EShare CKSShare
}

// BinarySize returns the size in bytes that the object once marshalled into a binary form.
func (share *RefreshShare) BinarySize() int {
	return share.E2SShare.BinarySize() + share.S2EShare.BinarySize()
}

// MarshalBinary encodes the object into a binary form on a newly allocated slice of bytes.
func (share *RefreshShare) MarshalBinary() (p []byte, err error) {
	p = make([]byte, share.BinarySize())
	_, err = share.Read(p)
	return
}

// Read encodes the object into a binary form on a preallocated slice of bytes
// and returns the number of bytes written.
func (share *RefreshShare) Read(p []byte) (n int, err error) {
	if n, err = share.E2SShare.Read(p[n:]); err != nil {
		return
	}
	var inc int
	inc, err = share.S2EShare.Read(p[n:])
	return n + inc, err
}

// WriteTo writes the object on an io.Writer.
// To ensure optimal efficiency and minimal allocations, the user is encouraged
// to provide a struct implementing the interface buffer.Writer, which defines
// a subset of the method of the bufio.Writer.
// If w is not compliant to the buffer.Writer interface, it will be wrapped in
// a new bufio.Writer.
// For additional information, see lattigo/utils/buffer/writer.go.
func (share *RefreshShare) WriteTo(w io.Writer) (n int64, err error) {
	switch w := w.(type) {
	case buffer.Writer:
		if n, err = share.E2SShare.WriteTo(w); err != nil {
			return
		}
		var inc int64
		inc, err = share.S2EShare.WriteTo(w)
		return n + inc, err
	default:
		return share.WriteTo(bufio.NewWriter(w))
	}
}

// UnmarshalBinary decodes a slice of bytes generated by MarshalBinary,
// WriteTo or Read on the object.
func (share *RefreshShare) UnmarshalBinary(p []byte) (err error) {
	_, err = share.Write(p)
	return
}

// Write decodes a slice of bytes generated by MarshalBinary or
// Read on the object and returns the number of bytes read.
func (share *RefreshShare) Write(p []byte) (n int, err error) {
	if n, err = share.E2SShare.Write(p[n:]); err != nil {
		return
	}
	var inc int
	inc, err = share.S2EShare.Write(p[n:])
	return n + inc, err
}

// ReadFrom reads on the object from an io.Writer.
// To ensure optimal efficiency and minimal allocations, the user is encouraged
// to provide a struct implementing the interface buffer.Reader, which defines
// a subset of the method of the bufio.Reader.
// If r is not compliant to the buffer.Reader interface, it will be wrapped in
// a new bufio.Reader.
// For additional information, see lattigo/utils/buffer/reader.go.
func (share *RefreshShare) ReadFrom(r io.Reader) (n int64, err error) {
	switch r := r.(type) {
	case buffer.Reader:
		if n, err = share.E2SShare.ReadFrom(r); err != nil {
			return
		}
		var inc int64
		inc, err = share.S2EShare.ReadFrom(r)
		return n + inc, err
	default:
		return share.ReadFrom(bufio.NewReader(r))
	}
}
